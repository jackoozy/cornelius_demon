/*********************************************************************
 * Software License Agreement (BSD License)
 *
 *  Copyright (c) 2012, Willow Garage, Inc.
 *  All rights reserved.
 *
 *  Redistribution and use in source and binary forms, with or without
 *  modification, are permitted provided that the following conditions
 *  are met:
 *
 *   * Redistributions of source code must retain the above copyright
 *     notice, this list of conditions and the following disclaimer.
 *   * Redistributions in binary form must reproduce the above
 *     copyright notice, this list of conditions and the following
 *     disclaimer in the documentation and/or other materials provided
 *     with the distribution.
 *   * Neither the name of Willow Garage nor the names of its
 *     contributors may be used to endorse or promote products derived
 *     from this software without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 *  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 *  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
 *  FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
 *  COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
 *  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
 *  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 *  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
 *  CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
 *  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
 *  ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 *********************************************************************/

/* Author: Sachin Chitta, Michael Lautman */

#include <pluginlib/class_loader.hpp>
#include <ros/ros.h>
#include "std_msgs/String.h"

// MoveIt
#include <moveit/robot_model_loader/robot_model_loader.h>
#include <moveit/planning_interface/planning_interface.h>
#include <moveit/planning_scene/planning_scene.h>
#include <moveit/move_group_interface/move_group_interface.h>
#include <moveit/planning_scene_interface/planning_scene_interface.h>
#include <moveit/kinematic_constraints/utils.h>
#include <moveit_msgs/DisplayTrajectory.h>
#include <moveit_msgs/PlanningScene.h>
#include <moveit_visual_tools/moveit_visual_tools.h>
#include <Eigen/Core>
#include <Eigen/Geometry>
#include <boost/scoped_ptr.hpp>
#include <iostream>
#include <thread>

const double tau = 2 * M_PI;

Eigen::Vector3d bottomLeftCorner;
Eigen::Vector3d topLeftCorner;
Eigen::Vector3d topRightCorner;
Eigen::Vector3d bottomRightCorner;
Eigen::Affine3d TdrawSpace;
double drawSpaceHeight;
double drawSpaceWidth;

// Computes TdrawSpace and drawSpaceHeight and drawSpaceWidth. 
// Ensure that draw-space corners are set first.
Eigen::Affine3d calculateDrawSpaceTransformation() {
    // Calculate the vectors for the edges of the paper page
    Eigen::Vector3d xAxis = topRightCorner - topLeftCorner;
    drawSpaceWidth = xAxis.norm();
    Eigen::Vector3d yAxis = bottomLeftCorner - topLeftCorner;
    drawSpaceHeight = yAxis.norm();

    // Normalize the vectors
    xAxis.normalize();
    yAxis.normalize();
    // Calculate the z-axis (normal to the paper plane) using the cross product of the x-axis and y-axis
    Eigen::Vector3d zAxis = xAxis.cross(yAxis);
    zAxis.normalize();
    // Construct the rotation matrix using the vectors as columns
    Eigen::Matrix3d rotationMatrix;
    rotationMatrix.col(0) = xAxis;
    rotationMatrix.col(1) = yAxis;
    rotationMatrix.col(2) = zAxis;
    // Create an affine transformation from rotation matrix and translation vector
    Eigen::Affine3d transformation(Eigen::Translation3d(topLeftCorner) * rotationMatrix);

    TdrawSpace = transformation;
}

// Takes in normalised draw-space point and returns 3D point.
Eigen::Vector3d drawSpaceToWorld(const Eigen::Vector2d& pagePoint) {
    // Transform the 2D point into a 3D point on the plane
    Eigen::Vector3d pagePoint3D(pagePoint.x()*drawSpaceWidth, pagePoint.y()*drawSpaceHeight, 0.0);
    // Apply the transformation to convert the point to the world frame
    Eigen::Vector3d worldPoint = TdrawSpace * pagePoint3D;
    return worldPoint;
}

void testFunction(){
  bottomLeftCorner = Eigen::Vector3d(3,4.5,5);
  topLeftCorner = Eigen::Vector3d(3,4.5,6.5);
  topRightCorner = Eigen::Vector3d(3,2,6.5);
  bottomRightCorner = Eigen::Vector3d(3,2,5);
  drawSpaceHeight = 1.5;
  drawSpaceWidth = 2.5;

  calculateDrawSpaceTransformation();

  Eigen::Vector2d testPoint(0.5, 0.5);

  Eigen::Vector3d testPointWorld = drawSpaceToWorld(testPoint);
  std::cout << std::fixed << std::setprecision(2);
  std::cout << "Vector: " << testPointWorld.transpose() << std::endl;
}

// Callback function for messages from GUI
void callback(const std_msgs::String::ConstPtr& msg)
{
    ROS_INFO("Received message: %s", msg->data.c_str());
    
}

// Move to position
void moveTo(){

}

int main(int argc, char** argv)
{


  // NODE SETUP
  const std::string node_name = "current_program";
  ros::init(argc, argv, node_name);
  ros::NodeHandle node_handle("~");
  // Create a publisher to publish messages of type std_msgs::String on the "gui_com" topic
  ros::Publisher pub = node_handle.advertise<std_msgs::String>("gui_com", 10);
  // Create a subscriber to subscribe to messages of type std_msgs::String on the "gui_com" topic
  ros::Subscriber sub = node_handle.subscribe("gui_com", 10, callback);
  ros::AsyncSpinner spinner(1);
  spinner.start();


  // MOVEIT SETUP
  const std::string PLANNING_GROUP = "manipulator";
  robot_model_loader::RobotModelLoader robot_model_loader("robot_description");
  const moveit::core::RobotModelPtr& robot_model = robot_model_loader.getModel();
  // Create a RobotState and JointModelGroup to keep track of the current robot pose and planning group*/
  moveit::core::RobotStatePtr robot_state_ptr(new moveit::core::RobotState(robot_model));
  const moveit::core::JointModelGroup* joint_model_group = robot_state_ptr->getJointModelGroup(PLANNING_GROUP);
  moveit::planning_interface::PlanningSceneInterface planning_scene_interface;
  moveit::planning_interface::MoveGroupInterface move_group_interface(PLANNING_GROUP);
  // Using the :moveit_core:`RobotModel`, we can construct a :planning_scene:`PlanningScene`
  // that maintains the state of the world (including the robot).
  planning_scene::PlanningScenePtr planning_scene(new planning_scene::PlanningScene(robot_model));
  // Configure a valid robot state
  



  //planning_scene->getCurrentStateNonConst().setToDefaultValues(joint_model_group, "ready");

  // while(ros::ok()){
  //   planning_scene->setCurrentState(*robot_state_ptr);
  //   Eigen::Affine3d eeTransform = planning_scene->getCurrentStateNonConst().getFrameTransform("tool0");
  //   Eigen::Vector3d translation = eeTransform.translation();

  //   // Print the translation vector
  //   std::cout << "Translation Vector: " << translation.transpose() << std::endl;

  //   std::this_thread::sleep_for(std::chrono::milliseconds(400));
  // }








  // We will now construct a loader to load a planner, by name.
  // Note that we are using the ROS pluginlib library here.
  boost::scoped_ptr<pluginlib::ClassLoader<planning_interface::PlannerManager>> planner_plugin_loader;
  planning_interface::PlannerManagerPtr planner_instance;
  std::string planner_plugin_name;

  // Load the PILZ motion planner
  if (!node_handle.getParam("planning_plugin", planner_plugin_name)) {
    ROS_FATAL_STREAM("Could not find planner plugin name"); }
  try {
    planner_plugin_loader.reset(new pluginlib::ClassLoader<planning_interface::PlannerManager>(
        "moveit_core", "planning_interface::PlannerManager"));
  } catch (pluginlib::PluginlibException& ex) {
    ROS_FATAL_STREAM("Exception while creating planning plugin loader " << ex.what()); }
  try {
    planner_instance.reset(planner_plugin_loader->createUnmanagedInstance(planner_plugin_name));
    if (!planner_instance->initialize(robot_model, node_handle.getNamespace()))
      ROS_FATAL_STREAM("Could not initialize planner instance");
    ROS_INFO_STREAM("Using planning interface '" << planner_instance->getDescription() << "'");
  } catch (pluginlib::PluginlibException& ex) {
    const std::vector<std::string>& classes = planner_plugin_loader->getDeclaredClasses();
    std::stringstream ss;
    for (const auto& cls : classes)
      ss << cls << " ";
    ROS_ERROR_STREAM("Exception while loading planner '" << planner_plugin_name << "': " << ex.what() << std::endl
                                                         << "Available plugins: " << ss.str());
  }

  // Visualization
  // ^^^^^^^^^^^^^
  // The package MoveItVisualTools provides many capabilities for visualizing objects, robots,
  // and trajectories in RViz as well as debugging tools such as step-by-step introspection of a script
  namespace rvt = rviz_visual_tools;
  moveit_visual_tools::MoveItVisualTools visual_tools("base_link");
  visual_tools.loadRobotStatePub("/display_robot_state");
  visual_tools.enableBatchPublishing();
  visual_tools.deleteAllMarkers();  // clear all old markers
  visual_tools.trigger();
  /* Remote control is an introspection tool that allows users to step through a high level script
     via buttons and keyboard shortcuts in RViz */
  visual_tools.loadRemoteControl();
  /* RViz provides many types of markers, in this demo we will use text, cylinders, and spheres*/
  Eigen::Isometry3d text_pose = Eigen::Isometry3d::Identity();
  text_pose.translation().z() = 1.75;
  visual_tools.publishText(text_pose, "Motion Planning API Demo", rvt::WHITE, rvt::XLARGE);
  /* Batch publishing is used to reduce the number of messages being sent to RViz for large visualizations */
  visual_tools.trigger();

  /* We can also use visual_tools to wait for user input */
  visual_tools.prompt("Press 'next' in the RvizVisualToolsGui window to start the demo");

  // Pose Goal
  // ^^^^^^^^^
  // We will now create a motion plan request for the arm of the Panda
  // specifying the desired pose of the end-effector as input.
  

  // // PILZ MOTION PLANNER GOAL REQUEST
  // visual_tools.publishRobotState(planning_scene->getCurrentStateNonConst(), rviz_visual_tools::GREEN);
  // visual_tools.trigger();
  // planning_interface::MotionPlanRequest req;
  // planning_interface::MotionPlanResponse res;
  // geometry_msgs::PoseStamped pose;
  // pose.header.frame_id = "base_link";
  // pose.pose.position.x = 0.3;
  // pose.pose.position.y = 0.2;
  // pose.pose.position.z = 0.1;
  // pose.pose.orientation.y = std::pow(2,0.5);
  // pose.pose.orientation.z = std::pow(2,0.5);
  // // A tolerance of 0.01 m is specified in position
  // // and 0.01 radians in orientation
  // std::vector<double> tolerance_pose(3, 0.5);
  // std::vector<double> tolerance_angle(3, 0.5);
  // moveit_msgs::Constraints pose_goal =
  //     kinematic_constraints::constructGoalConstraints("tool0", pose, tolerance_pose, tolerance_angle);
  // req.group_name = PLANNING_GROUP;
  // req.goal_constraints.push_back(pose_goal);
  // req.planner_id = "PTP";
  // req.max_velocity_scaling_factor = .1;
  // req.max_acceleration_scaling_factor = .5;
  // // Get the current state of the robot
  // moveit::core::RobotState current_state = planning_scene->getCurrentStateNonConst(); // ???????????????/
  // // Get the joint model group of the robot
  // //joint_model_group = current_state.getJointModelGroup(PLANNING_GROUP);
  // // Get the joint names, positions, and velocities
  // const std::vector<std::string>& joint_names = joint_model_group->getVariableNames();
  // std::vector<double> joint_positions;
  // std::vector<double> joint_velocities;
  // robot_state_ptr->copyJointGroupPositions(joint_model_group, joint_positions);
  // robot_state_ptr->copyJointGroupVelocities(joint_model_group, joint_velocities);
  // req.start_state.joint_state.name = joint_names;
  // req.start_state.joint_state.position = joint_positions;
  // // We now construct a planning context that encapsulate the scene,
  // // the request and the response. We call the planner using this
  // // planning context
  // planning_interface::PlanningContextPtr context =
  //     planner_instance->getPlanningContext(planning_scene, req, res.error_code_);
  // context->solve(res);
  // if (res.error_code_.val != res.error_code_.SUCCESS)
  // {
  //   ROS_ERROR("Could not compute plan successfully");
  //   return 0;
  // }

  // OMPL MOTION PLANNER
  visual_tools.publishRobotState(planning_scene->getCurrentStateNonConst(), rviz_visual_tools::GREEN);
  visual_tools.trigger();
  planning_interface::MotionPlanRequest req;
  planning_interface::MotionPlanResponse res;
  geometry_msgs::PoseStamped pose;
  pose.header.frame_id = "base_link";
  pose.pose.position.x = 0.3;
  pose.pose.position.y = 0.0;
  pose.pose.position.z = 0.0;
  // Create a quaternion representing the negative z-axis orientation
  Eigen::Quaterniond quaternion(0.0, 0.0, -1.0, 0.0);
  geometry_msgs::Quaternion ros_quaternion;
  pose.pose.orientation.x = quaternion.x();
  pose.pose.orientation.y = quaternion.y();
  pose.pose.orientation.z = quaternion.z();
  pose.pose.orientation.w = quaternion.w();

  // pose.pose.orientation.y = std::pow(2,0.2);
  // pose.pose.orientation.z = std::pow(2,0.5);
  // A tolerance of 0.01 m is specified in position
  // and 0.01 radians in orientation
  std::vector<double> tolerance_pose(3, 0.1);
  std::vector<double> tolerance_angle(3, 0.1);
  tolerance_angle.at(2) = std::numeric_limits<double>::infinity(); // Set to infinity for z axis
  // We will create the request as a constraint using a helper function available
  // from the
  // `kinematic_constraints`_
  // package.
  //
  // .. _kinematic_constraints:
  //     http://docs.ros.org/noetic/api/moveit_core/html/namespacekinematic__constraints.html#a88becba14be9ced36fefc7980271e132
  moveit_msgs::Constraints pose_goal =
      kinematic_constraints::constructGoalConstraints("tool0", pose, tolerance_pose, tolerance_angle);
  req.group_name = PLANNING_GROUP;
  req.goal_constraints.push_back(pose_goal);
  // We now construct a planning context that encapsulate the scene,
  // the request and the response. We call the planner using this
  // planning context
  planning_interface::PlanningContextPtr context =
      planner_instance->getPlanningContext(planning_scene, req, res.error_code_);
  context->solve(res);
  if (res.error_code_.val != res.error_code_.SUCCESS)
  {
    ROS_ERROR("Could not compute plan successfully");
    return 0;
  }

  // Visualize the result
  // ^^^^^^^^^^^^^^^^^^^^
  ros::Publisher display_publisher =
      node_handle.advertise<moveit_msgs::DisplayTrajectory>("/move_group/display_planned_path", 1, true);
  moveit_msgs::DisplayTrajectory display_trajectory;

  /* Visualize the trajectory */
  moveit_msgs::MotionPlanResponse response;
  res.getMessage(response);

  display_trajectory.trajectory_start = response.trajectory_start;
  display_trajectory.trajectory.push_back(response.trajectory);
  visual_tools.publishTrajectoryLine(display_trajectory.trajectory.back(), joint_model_group);
  visual_tools.trigger();
  display_publisher.publish(display_trajectory);

  /* Set the state in the planning scene to the final state of the last plan */
  robot_state_ptr->setJointGroupPositions(joint_model_group, response.trajectory.joint_trajectory.points.back().positions);
  planning_scene->setCurrentState(*robot_state_ptr.get());

  // Display the goal state
  visual_tools.publishRobotState(planning_scene->getCurrentStateNonConst(), rviz_visual_tools::GREEN);
  visual_tools.publishAxisLabeled(pose.pose, "goal_1");
  visual_tools.publishText(text_pose, "Pose Goal (1)", rvt::WHITE, rvt::XLARGE);
  visual_tools.trigger();

  /* We can also use visual_tools to wait for user input */
  visual_tools.prompt("Press 'next' in the RvizVisualToolsGui window to execute plan!");



  
  // // Constraints...
  // moveit_msgs::OrientationConstraint ocm2;
  // ocm2.link_name = "tool0";
  // ocm2.header.frame_id = "base_link";
  // ocm2.orientation.w = 1.0;
  // ocm2.absolute_x_axis_tolerance = 0.3;
  // ocm2.absolute_y_axis_tolerance = 0.4;
  // ocm2.absolute_z_axis_tolerance = 0.3;
  // ocm2.weight = 1.0;
  // // Now, set it as the path constraint for the group.
  // moveit_msgs::Constraints test_constraints;
  // test_constraints.orientation_constraints.push_back(ocm2);
  // move_group_interface.setPathConstraints(test_constraints);

// this works!!!!
  // move_group_interface.setPoseTarget(pose.pose,"tool0");
  // std::vector<double> joint_group_positions = {1.0, 1.0, 1.0, 0.0, 0.0, 0.0};
  // move_group_interface.setJointValueTarget(joint_group_positions);

  // // Plan the trajectory
  // moveit::planning_interface::MoveGroupInterface::Plan my_plan;
  // bool success = (move_group_interface.plan(my_plan) == moveit::planning_interface::MoveItErrorCode::SUCCESS);
  // if(success) move_group_interface.execute(my_plan);
  // else ROS_WARN("Failed to plan a motion to the joint space goal.");
//////////
 // Compute IK solution
  move_group_interface.setPoseTarget(pose,"tool0");

  // Get the joint values from the IK solution
  std::vector<double> joint_values;
  move_group_interface.getCurrentState()->copyJointGroupPositions(
    move_group_interface.getCurrentState()->getRobotModel()->getJointModelGroup(move_group_interface.getName()), 
    joint_values);
    // Set joint value target
    move_group_interface.setJointValueTarget(joint_values);
    moveit::planning_interface::MoveGroupInterface::Plan my_plan;
    bool success = (move_group_interface.plan(my_plan) == moveit::planning_interface::MoveItErrorCode::SUCCESS);
    if(success) move_group_interface.execute(my_plan);
    else ROS_WARN("Failed to plan a motion to the joint space goal.");
    // Plan the trajectory
    // moveit::planning_interface::MoveGroupInterface::Plan my_plan; ////////////////
    // bool success = (move_group_interface.plan(my_plan) == moveit::planning_interface::MoveItErrorCode::SUCCESS);
    // if (!success)
    // {
    //     ROS_ERROR("Failed to plan a motion to the joint space goal.");
    //     return 1;
    // }

    // Execute the trajectory
    // move_group_interface.plan(my_plan);
    // move_group_interface.execute(my_plan);

//  // Compute IK
//   move_group_interface.setPoseTarget(pose,"tool0");

//   // Get the joint values from the IK solution
//   std::vector<double> joint_values;
//   move_group_interface.getCurrentState()->copyJointGroupPositions(
//     move_group_interface.getCurrentState()->getRobotModel()->getJointModelGroup(move_group_interface.getName()), 
//     joint_values);

//   ROS_INFO_STREAM("Joint values: " << joint_values[0] << ", " << joint_values[1] << ", " << joint_values[2] << ", " << joint_values[3] << ", " << joint_values[4] << ", " << joint_values[5]);
//   move_group_interface.setJointValueTarget(joint_values);

//   moveit::planning_interface::MoveGroupInterface::Plan my_plan;
//   bool success = (move_group_interface.plan(my_plan) == moveit::planning_interface::MoveItErrorCode::SUCCESS);
//   if(success) move_group_interface.execute(my_plan);
//   else ROS_WARN("Failed to plan a motion to the joint space goal.");

  // // Plan the trajectory
  // moveit::planning_interface::MoveGroupInterface::Plan my_plan;
  // bool success = (move_group_interface.plan(my_plan) == moveit::planning_interface::MoveItErrorCode::SUCCESS);
  // if(success) move_group_interface.execute(my_plan);
  // else ROS_WARN("Failed to plan a motion to the joint space goal.");


  visual_tools.prompt("Press 'next' in the RvizVisualToolsGui window to continue the demo");


  // Joint Space Goals
  // ^^^^^^^^^^^^^^^^^
  // Now, setup a joint space goal
  moveit::core::RobotState goal_state(robot_model);
  joint_values = { -1.0, 0.7, 0.7, -1.5, -0.7, 2.0, 0.0 };
  goal_state.setJointGroupPositions(joint_model_group, joint_values);
  moveit_msgs::Constraints joint_goal = kinematic_constraints::constructGoalConstraints(goal_state, joint_model_group);
  req.goal_constraints.clear();
  req.goal_constraints.push_back(joint_goal);

  // Call the planner and visualize the trajectory
  /* Re-construct the planning context */
  context = planner_instance->getPlanningContext(planning_scene, req, res.error_code_);
  /* Call the Planner */
  context->solve(res);
  /* Check that the planning was successful */
  if (res.error_code_.val != res.error_code_.SUCCESS)
  {
    ROS_ERROR("Could not compute plan successfully");
    return 0;
  }
  /* Visualize the trajectory */
  res.getMessage(response);
  display_trajectory.trajectory.push_back(response.trajectory);

  /* Now you should see two planned trajectories in series*/
  visual_tools.publishTrajectoryLine(display_trajectory.trajectory.back(), joint_model_group);
  visual_tools.trigger();
  display_publisher.publish(display_trajectory);

  /* We will add more goals. But first, set the state in the planning
     scene to the final state of the last plan */
  robot_state_ptr->setJointGroupPositions(joint_model_group, response.trajectory.joint_trajectory.points.back().positions);
  planning_scene->setCurrentState(*robot_state_ptr.get());

  // Display the goal state
  visual_tools.publishRobotState(planning_scene->getCurrentStateNonConst(), rviz_visual_tools::GREEN);
  visual_tools.publishAxisLabeled(pose.pose, "goal_2");
  visual_tools.publishText(text_pose, "Joint Space Goal (2)", rvt::WHITE, rvt::XLARGE);
  visual_tools.trigger();

  /* Wait for user input */
  visual_tools.prompt("Press 'next' in the RvizVisualToolsGui window to continue the demo");

  /* Now, we go back to the first goal to prepare for orientation constrained planning */
  req.goal_constraints.clear();
  req.goal_constraints.push_back(pose_goal);
  context = planner_instance->getPlanningContext(planning_scene, req, res.error_code_);
  context->solve(res);
  res.getMessage(response);

  display_trajectory.trajectory.push_back(response.trajectory);
  visual_tools.publishTrajectoryLine(display_trajectory.trajectory.back(), joint_model_group);
  visual_tools.trigger();
  display_publisher.publish(display_trajectory);

  /* Set the state in the planning scene to the final state of the last plan */
  robot_state_ptr->setJointGroupPositions(joint_model_group, response.trajectory.joint_trajectory.points.back().positions);
  planning_scene->setCurrentState(*robot_state_ptr.get());

  // Display the goal state
  visual_tools.publishRobotState(planning_scene->getCurrentStateNonConst(), rviz_visual_tools::GREEN);
  visual_tools.trigger();

  /* Wait for user input */
  visual_tools.prompt("Press 'next' in the RvizVisualToolsGui window to continue the demo");

  // Adding Path Constraints
  // ^^^^^^^^^^^^^^^^^^^^^^^
  // Let's add a new pose goal again. This time we will also add a path constraint to the motion.
  /* Let's create a new pose goal */

  pose.pose.position.x = 0.32;
  pose.pose.position.y = -0.25;
  pose.pose.position.z = 0.65;
  pose.pose.orientation.w = 1.0;
  moveit_msgs::Constraints pose_goal_2 =
      kinematic_constraints::constructGoalConstraints("panda_link8", pose, tolerance_pose, tolerance_angle);

  /* Now, let's try to move to this new pose goal*/
  req.goal_constraints.clear();
  req.goal_constraints.push_back(pose_goal_2);

  /* But, let's impose a path constraint on the motion.
     Here, we are asking for the end-effector to stay level*/
  geometry_msgs::QuaternionStamped quaternion1;
  quaternion1.header.frame_id = "panda_link0";
  quaternion1.quaternion.w = 1.0;
  req.path_constraints = kinematic_constraints::constructGoalConstraints("panda_link8", quaternion1);

  // Imposing path constraints requires the planner to reason in the space of possible positions of the end-effector
  // (the workspace of the robot)
  // because of this, we need to specify a bound for the allowed planning volume as well;
  // Note: a default bound is automatically filled by the WorkspaceBounds request adapter (part of the OMPL pipeline,
  // but that is not being used in this example).
  // We use a bound that definitely includes the reachable space for the arm. This is fine because sampling is not done
  // in this volume
  // when planning for the arm; the bounds are only used to determine if the sampled configurations are valid.
  req.workspace_parameters.min_corner.x = req.workspace_parameters.min_corner.y =
      req.workspace_parameters.min_corner.z = -2.0;
  req.workspace_parameters.max_corner.x = req.workspace_parameters.max_corner.y =
      req.workspace_parameters.max_corner.z = 2.0;

  // Call the planner and visualize all the plans created so far.
  context = planner_instance->getPlanningContext(planning_scene, req, res.error_code_);
  context->solve(res);
  res.getMessage(response);
  display_trajectory.trajectory.push_back(response.trajectory);
  visual_tools.publishTrajectoryLine(display_trajectory.trajectory.back(), joint_model_group);
  visual_tools.trigger();
  display_publisher.publish(display_trajectory);

  /* Set the state in the planning scene to the final state of the last plan */
  robot_state_ptr->setJointGroupPositions(joint_model_group, response.trajectory.joint_trajectory.points.back().positions);
  planning_scene->setCurrentState(*robot_state_ptr.get());

  // Display the goal state
  visual_tools.publishRobotState(planning_scene->getCurrentStateNonConst(), rviz_visual_tools::GREEN);
  visual_tools.publishAxisLabeled(pose.pose, "goal_3");
  visual_tools.publishText(text_pose, "Orientation Constrained Motion Plan (3)", rvt::WHITE, rvt::XLARGE);
  visual_tools.trigger();

  // END_TUTORIAL
  /* Wait for user input */
  visual_tools.prompt("Press 'next' in the RvizVisualToolsGui window to exit the demo");
  planner_instance.reset();

  return 0;

  // std::this_thread::sleep_for(std::chrono::seconds(1));
  // // testFunction();

  // ros::init(argc, argv, "cornelius_cortex");
  // ros::NodeHandle node_handle;

  // // ROS spinning must be running for the MoveGroupInterface to get information
  // // about the robot's state. One way to do this is to start an AsyncSpinner
  // // beforehand.
  // ros::AsyncSpinner spinner(1);
  // spinner.start();

  // // BEGIN_TUTORIAL
  // //
  // // Setup
  // // ^^^^^
  // //
  // // MoveIt operates on sets of joints called "planning groups" and stores them in an object called
  // // the `JointModelGroup`. Throughout MoveIt the terms "planning group" and "joint model group"
  // // are used interchangeably.
  // static const std::string PLANNING_GROUP = "manipulator";

  // // The :planning_interface:`MoveGroupInterface` class can be easily
  // // setup using just the name of the planning group you would like to control and plan for.
  // moveit::planning_interface::MoveGroupInterface move_group_interface(PLANNING_GROUP);

  // // We will use the :planning_interface:`PlanningSceneInterface`
  // // class to add and remove collision objects in our "virtual world" scene
  // moveit::planning_interface::PlanningSceneInterface planning_scene_interface;

  // // Raw pointers are frequently used to refer to the planning group for improved performance.
  // const moveit::core::JointModelGroup* joint_model_group =
  //     move_group_interface.getCurrentState()->getJointModelGroup(PLANNING_GROUP);

  // // Visualization
  // // ^^^^^^^^^^^^^
  // //
  // // The package MoveItVisualTools provides many capabilities for visualizing objects, robots,
  // // and trajectories in RViz as well as debugging tools such as step-by-step introspection of a script.
  // namespace rvt = rviz_visual_tools;
  // moveit_visual_tools::MoveItVisualTools visual_tools("base_link");
  // visual_tools.deleteAllMarkers();

  // // Remote control is an introspection tool that allows users to step through a high level script
  // // via buttons and keyboard shortcuts in RViz
  // visual_tools.loadRemoteControl();

  // // RViz provides many types of markers, in this demo we will use text, cylinders, and spheres
  // Eigen::Isometry3d text_pose = Eigen::Isometry3d::Identity();
  // text_pose.translation().z() = 1.0;
  // visual_tools.publishText(text_pose, "motion planning module", rvt::WHITE, rvt::XLARGE);

  // // Batch publishing is used to reduce the number of messages being sent to RViz for large visualizations
  // visual_tools.trigger();

  // // Getting Basic Information
  // // ^^^^^^^^^^^^^^^^^^^^^^^^^
  // //
  // // We can print the name of the reference frame for this robot.
  // ROS_INFO_NAMED("tutorial", "Planning frame: %s", move_group_interface.getPlanningFrame().c_str());

  // // We can also print the name of the end-effector link for this group.
  // ROS_INFO_NAMED("tutorial", "End effector link: %s", move_group_interface.getEndEffectorLink().c_str());

  // // We can get a list of all the groups in the robot:
  // ROS_INFO_NAMED("tutorial", "2Available Planning Groups:");
  // std::copy(move_group_interface.getJointModelGroupNames().begin(),
  //           move_group_interface.getJointModelGroupNames().end(), std::ostream_iterator<std::string>(std::cout, ", "));

  // // Start the demo
  // // ^^^^^^^^^^^^^^^^^^^^^^^^^
  // visual_tools.prompt("Press 'next' in the RvizVisualToolsGui window to start the demo");

  // // // Constraints...
  // // moveit_msgs::OrientationConstraint ocm;
  // // ocm.link_name = "tool0";
  // // ocm.header.frame_id = "base_link";
  // // ocm.orientation.w = 1.0;
  // // ocm.absolute_x_axis_tolerance = 0.1;
  // // ocm.absolute_y_axis_tolerance = 0.1;
  // // ocm.absolute_z_axis_tolerance = 0.1;
  // // ocm.weight = 1.0;

  // // // Now, set it as the path constraint for the group.
  // // moveit_msgs::Constraints test_constraints;
  // // test_constraints.orientation_constraints.push_back(ocm);
  // // move_group_interface.setPathConstraints(test_constraints);

  // // .. _move_group_interface-planning-to-pose-goal:
  // //
  // // Planning to a Pose goal
  // // ^^^^^^^^^^^^^^^^^^^^^^^
  // // We can plan a motion for this group to a desired pose for the
  // // end-effector.
  // geometry_msgs::Pose target_pose1;
  // target_pose1.orientation.w = 1.0;
  // target_pose1.position.x = 0.2;
  // target_pose1.position.y = 0.3;
  // target_pose1.position.z = 0.4;
  // move_group_interface.setPoseTarget(target_pose1);

  // // Now, we call the planner to compute the plan and visualize it.
  // // Note that we are just planning, not asking move_group_interface
  // // to actually move the robot.
  // moveit::planning_interface::MoveGroupInterface::Plan my_plan;

  // bool success = (move_group_interface.plan(my_plan) == moveit::core::MoveItErrorCode::SUCCESS);

  // ROS_INFO_NAMED("tutorial", "Visualizing plan 1 (pose goal) %s", success ? "" : "FAILED");

  // // Visualizing plans
  // // ^^^^^^^^^^^^^^^^^
  // // We can also visualize the plan as a line with markers in RViz.
  // ROS_INFO_NAMED("tutorial", "Visualizing plan 1 as trajectory line");
  // visual_tools.publishAxisLabeled(target_pose1, "pose1");
  // visual_tools.publishText(text_pose, "Pose Goal", rvt::WHITE, rvt::XLARGE);
  // visual_tools.publishTrajectoryLine(my_plan.trajectory_, joint_model_group);
  // visual_tools.trigger();
  // visual_tools.prompt("Press 'next' in the RvizVisualToolsGui window to execute");

  // // Finally, to execute the trajectory stored in my_plan, you could use the following method call:
  // // Note that this can lead to problems if the robot moved in the meanwhile.
  // move_group_interface.execute(my_plan);

  // // Moving to a pose goal
  // // ^^^^^^^^^^^^^^^^^^^^^
  // //
  // // If you do not want to inspect the planned trajectory,
  // // the following is a more robust combination of the two-step plan+execute pattern shown above
  // // and should be preferred. Note that the pose goal we had set earlier is still active,
  // // so the robot will try to move to that goal.

  // // move_group_interface.move();

  // visual_tools.prompt("Press 'next' in the RvizVisualToolsGui window to continue");

  // // Planning to a joint-space goal
  // // ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  // //
  // // Let's set a joint space goal and move towards it.  This will replace the
  // // pose target we set above.
  // //
  // // To start, we'll create an pointer that references the current robot's state.
  // // RobotState is the object that contains all the current position/velocity/acceleration data.
  // moveit::core::RobotStatePtr current_state = move_group_interface.getCurrentState();
  // //
  // // Next get the current set of joint values for the group.
  // std::vector<double> joint_group_positions;
  // current_state->copyJointGroupPositions(joint_model_group, joint_group_positions);

  // // Now, let's modify one of the joints, plan to the new joint space goal and visualize the plan.
  // joint_group_positions[0] = -tau / 6;  // -1/6 turn in radians
  // move_group_interface.setJointValueTarget(joint_group_positions);

  // // We lower the allowed maximum velocity and acceleration to 5% of their maximum.
  // // The default values are 10% (0.1).
  // // Set your preferred defaults in the joint_limits.yaml file of your robot's moveit_config
  // // or set explicit factors in your code if you need your robot to move faster.
  // move_group_interface.setMaxVelocityScalingFactor(0.05);
  // move_group_interface.setMaxAccelerationScalingFactor(0.05);

  // success = (move_group_interface.plan(my_plan) == moveit::core::MoveItErrorCode::SUCCESS);
  // ROS_INFO_NAMED("tutorial", "Visualizing plan 2 (joint space goal) %s", success ? "" : "FAILED");

  // // Visualize the plan in RViz
  // visual_tools.deleteAllMarkers();
  // visual_tools.publishText(text_pose, "Joint Space Goal", rvt::WHITE, rvt::XLARGE);
  // visual_tools.publishTrajectoryLine(my_plan.trajectory_, joint_model_group);
  // visual_tools.trigger();
  // visual_tools.prompt("Press 'next' in the RvizVisualToolsGui window to continue the demo");

  // // Planning with Path Constraints
  // // ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  // //
  // // Path constraints can easily be specified for a link on the robot.
  // // Let's specify a path constraint and a pose goal for our group.
  // // First define the path constraint.
  // moveit_msgs::OrientationConstraint ocm;
  // ocm.link_name = "panda_link7";
  // ocm.header.frame_id = "panda_link0";
  // ocm.orientation.w = 1.0;
  // ocm.absolute_x_axis_tolerance = 0.1;
  // ocm.absolute_y_axis_tolerance = 0.1;
  // ocm.absolute_z_axis_tolerance = 0.1;
  // ocm.weight = 1.0;

  // // Now, set it as the path constraint for the group.
  // moveit_msgs::Constraints test_constraints;
  // test_constraints.orientation_constraints.push_back(ocm);
  // move_group_interface.setPathConstraints(test_constraints);

  // // Enforce Planning in Joint Space
  // // ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  // //
  // // Depending on the planning problem MoveIt chooses between
  // // ``joint space`` and ``cartesian space`` for problem representation.
  // // Setting the group parameter ``enforce_joint_model_state_space:true`` in
  // // the ompl_planning.yaml file enforces the use of ``joint space`` for all plans.
  // //
  // // By default planning requests with orientation path constraints
  // // are sampled in ``cartesian space`` so that invoking IK serves as a
  // // generative sampler.
  // //
  // // By enforcing ``joint space`` the planning process will use rejection
  // // sampling to find valid requests. Please note that this might
  // // increase planning time considerably.
  // //
  // // We will reuse the old goal that we had and plan to it.
  // // Note that this will only work if the current state already
  // // satisfies the path constraints. So we need to set the start
  // // state to a new pose.
  // moveit::core::RobotState start_state(*move_group_interface.getCurrentState());
  // geometry_msgs::Pose start_pose2;
  // start_pose2.orientation.w = 1.0;
  // start_pose2.position.x = 0.55;
  // start_pose2.position.y = -0.05;
  // start_pose2.position.z = 0.8;
  // start_state.setFromIK(joint_model_group, start_pose2);
  // move_group_interface.setStartState(start_state);

  // // Now we will plan to the earlier pose target from the new
  // // start state that we have just created.
  // move_group_interface.setPoseTarget(target_pose1);

  // // Planning with constraints can be slow because every sample must call an inverse kinematics solver.
  // // Lets increase the planning time from the default 5 seconds to be sure the planner has enough time to succeed.
  // move_group_interface.setPlanningTime(10.0);

  // success = (move_group_interface.plan(my_plan) == moveit::core::MoveItErrorCode::SUCCESS);
  // ROS_INFO_NAMED("tutorial", "Visualizing plan 3 (constraints) %s", success ? "" : "FAILED");

  // // Visualize the plan in RViz
  // visual_tools.deleteAllMarkers();
  // visual_tools.publishAxisLabeled(start_pose2, "start");
  // visual_tools.publishAxisLabeled(target_pose1, "goal");
  // visual_tools.publishText(text_pose, "Constrained Goal", rvt::WHITE, rvt::XLARGE);
  // visual_tools.publishTrajectoryLine(my_plan.trajectory_, joint_model_group);
  // visual_tools.trigger();
  // visual_tools.prompt("next step");

  // // When done with the path constraint be sure to clear it.
  // move_group_interface.clearPathConstraints();

  // // Cartesian Paths
  // // ^^^^^^^^^^^^^^^
  // // You can plan a Cartesian path directly by specifying a list of waypoints
  // // for the end-effector to go through. Note that we are starting
  // // from the new start state above.  The initial pose (start state) does not
  // // need to be added to the waypoint list but adding it can help with visualizations
  // std::vector<geometry_msgs::Pose> waypoints;
  // waypoints.push_back(start_pose2);

  // geometry_msgs::Pose target_pose3 = start_pose2;

  // target_pose3.position.z -= 0.2;
  // waypoints.push_back(target_pose3);  // down

  // target_pose3.position.y -= 0.2;
  // waypoints.push_back(target_pose3);  // right

  // target_pose3.position.z += 0.2;
  // target_pose3.position.y += 0.2;
  // target_pose3.position.x -= 0.2;
  // waypoints.push_back(target_pose3);  // up and left

  // // We want the Cartesian path to be interpolated at a resolution of 1 cm
  // // which is why we will specify 0.01 as the max step in Cartesian
  // // translation.  We will specify the jump threshold as 0.0, effectively disabling it.
  // // Warning - disabling the jump threshold while operating real hardware can cause
  // // large unpredictable motions of redundant joints and could be a safety issue
  // moveit_msgs::RobotTrajectory trajectory;
  // const double jump_threshold = 0.0;
  // const double eef_step = 0.01;
  // double fraction = move_group_interface.computeCartesianPath(waypoints, eef_step, jump_threshold, trajectory);
  // ROS_INFO_NAMED("tutorial", "Visualizing plan 4 (Cartesian path) (%.2f%% achieved)", fraction * 100.0);

  // // Visualize the plan in RViz
  // visual_tools.deleteAllMarkers();
  // visual_tools.publishText(text_pose, "Cartesian Path", rvt::WHITE, rvt::XLARGE);
  // visual_tools.publishTrajectoryLine(trajectory, joint_model_group);
  // visual_tools.publishPath(waypoints, rvt::LIME_GREEN, rvt::SMALL);
  // for (std::size_t i = 0; i < waypoints.size(); ++i)
  //   visual_tools.publishAxisLabeled(waypoints[i], "pt" + std::to_string(i), rvt::SMALL);
  // visual_tools.trigger();
  // visual_tools.prompt("Press 'next' in the RvizVisualToolsGui window to continue the demo");

  // // Cartesian motions should often be slow, e.g. when approaching objects. The speed of cartesian
  // // plans cannot currently be set through the maxVelocityScalingFactor, but requires you to time
  // // the trajectory manually, as described `here <https://groups.google.com/forum/#!topic/moveit-users/MOoFxy2exT4>`_.
  // // Pull requests are welcome.
  // //
  // // You can execute a trajectory like this:
  // move_group_interface.execute(trajectory);

  // // Adding objects to the environment
  // // ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  // //
  // // First let's plan to another simple goal with no objects in the way.
  // move_group_interface.setStartState(*move_group_interface.getCurrentState());
  // geometry_msgs::Pose another_pose;
  // another_pose.orientation.x = 1.0;
  // another_pose.position.x = 0.7;
  // another_pose.position.y = 0.0;
  // another_pose.position.z = 0.59;
  // move_group_interface.setPoseTarget(another_pose);

  // success = (move_group_interface.plan(my_plan) == moveit::core::MoveItErrorCode::SUCCESS);
  // ROS_INFO_NAMED("tutorial", "Visualizing plan 5 (with no obstacles) %s", success ? "" : "FAILED");

  // visual_tools.deleteAllMarkers();
  // visual_tools.publishText(text_pose, "Clear Goal", rvt::WHITE, rvt::XLARGE);
  // visual_tools.publishTrajectoryLine(my_plan.trajectory_, joint_model_group);
  // visual_tools.trigger();
  // visual_tools.prompt("next step");

  // // The result may look like this:
  // //
  // // .. image:: ./move_group_interface_tutorial_clear_path.gif
  // //    :alt: animation showing the arm moving relatively straight toward the goal
  // //
  // // Now let's define a collision object ROS message for the robot to avoid.
  // moveit_msgs::CollisionObject collision_object;
  // collision_object.header.frame_id = move_group_interface.getPlanningFrame();

  // // The id of the object is used to identify it.
  // collision_object.id = "box1";

  // // Define a box to add to the world.
  // shape_msgs::SolidPrimitive primitive;
  // primitive.type = primitive.BOX;
  // primitive.dimensions.resize(3);
  // primitive.dimensions[primitive.BOX_X] = 0.1;
  // primitive.dimensions[primitive.BOX_Y] = 1.5;
  // primitive.dimensions[primitive.BOX_Z] = 0.5;

  // // Define a pose for the box (specified relative to frame_id)
  // geometry_msgs::Pose box_pose;
  // box_pose.orientation.w = 1.0;
  // box_pose.position.x = 0.5;
  // box_pose.position.y = 0.0;
  // box_pose.position.z = 0.25;

  // collision_object.primitives.push_back(primitive);
  // collision_object.primitive_poses.push_back(box_pose);
  // collision_object.operation = collision_object.ADD;

  // std::vector<moveit_msgs::CollisionObject> collision_objects;
  // collision_objects.push_back(collision_object);

  // // Now, let's add the collision object into the world
  // // (using a vector that could contain additional objects)
  // ROS_INFO_NAMED("tutorial", "Add an object into the world");
  // planning_scene_interface.addCollisionObjects(collision_objects);

  // // Show text in RViz of status and wait for MoveGroup to receive and process the collision object message
  // visual_tools.publishText(text_pose, "Add object", rvt::WHITE, rvt::XLARGE);
  // visual_tools.trigger();
  // visual_tools.prompt("Press 'next' in the RvizVisualToolsGui window to once the collision object appears in RViz");

  // // Now when we plan a trajectory it will avoid the obstacle
  // success = (move_group_interface.plan(my_plan) == moveit::core::MoveItErrorCode::SUCCESS);
  // ROS_INFO_NAMED("tutorial", "Visualizing plan 6 (pose goal move around cuboid) %s", success ? "" : "FAILED");
  // visual_tools.publishText(text_pose, "Obstacle Goal", rvt::WHITE, rvt::XLARGE);
  // visual_tools.publishTrajectoryLine(my_plan.trajectory_, joint_model_group);
  // visual_tools.trigger();
  // visual_tools.prompt("Press 'next' in the RvizVisualToolsGui window once the plan is complete");

  // // The result may look like this:
  // //
  // // .. image:: ./move_group_interface_tutorial_avoid_path.gif
  // //    :alt: animation showing the arm moving avoiding the new obstacle
  // //
  // // Attaching objects to the robot
  // // ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  // //
  // // You can attach objects to the robot, so that it moves with the robot geometry.
  // // This simulates picking up the object for the purpose of manipulating it.
  // // The motion planning should avoid collisions between the two objects as well.
  // moveit_msgs::CollisionObject object_to_attach;
  // object_to_attach.id = "cylinder1";

  // shape_msgs::SolidPrimitive cylinder_primitive;
  // cylinder_primitive.type = primitive.CYLINDER;
  // cylinder_primitive.dimensions.resize(2);
  // cylinder_primitive.dimensions[primitive.CYLINDER_HEIGHT] = 0.20;
  // cylinder_primitive.dimensions[primitive.CYLINDER_RADIUS] = 0.04;

  // // We define the frame/pose for this cylinder so that it appears in the gripper
  // object_to_attach.header.frame_id = move_group_interface.getEndEffectorLink();
  // geometry_msgs::Pose grab_pose;
  // grab_pose.orientation.w = 1.0;
  // grab_pose.position.z = 0.2;

  // // First, we add the object to the world (without using a vector)
  // object_to_attach.primitives.push_back(cylinder_primitive);
  // object_to_attach.primitive_poses.push_back(grab_pose);
  // object_to_attach.operation = object_to_attach.ADD;
  // planning_scene_interface.applyCollisionObject(object_to_attach);

  // // Then, we "attach" the object to the robot at the given link and allow collisions between the object and the listed
  // // links. You could also use applyAttachedCollisionObject to attach an object to the robot directly.
  // ROS_INFO_NAMED("tutorial", "Attach the object to the robot");
  // move_group_interface.attachObject(object_to_attach.id, "panda_hand", { "panda_leftfinger", "panda_rightfinger" });

  // visual_tools.publishText(text_pose, "Object attached to robot", rvt::WHITE, rvt::XLARGE);
  // visual_tools.trigger();

  // /* Wait for MoveGroup to receive and process the attached collision object message */
  // visual_tools.prompt("Press 'next' in the RvizVisualToolsGui window once the new object is attached to the robot");

  // // Replan, but now with the object in hand.
  // move_group_interface.setStartStateToCurrentState();
  // success = (move_group_interface.plan(my_plan) == moveit::core::MoveItErrorCode::SUCCESS);
  // ROS_INFO_NAMED("tutorial", "Visualizing plan 7 (move around cuboid with cylinder) %s", success ? "" : "FAILED");
  // visual_tools.publishTrajectoryLine(my_plan.trajectory_, joint_model_group);
  // visual_tools.trigger();
  // visual_tools.prompt("Press 'next' in the RvizVisualToolsGui window once the plan is complete");

  // // The result may look something like this:
  // //
  // // .. image:: ./move_group_interface_tutorial_attached_object.gif
  // //    :alt: animation showing the arm moving differently once the object is attached
  // //
  // // Detaching and Removing Objects
  // // ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  // //
  // // Now, let's detach the cylinder from the robot's gripper.
  // ROS_INFO_NAMED("tutorial", "Detach the object from the robot");
  // move_group_interface.detachObject(object_to_attach.id);

  // // Show text in RViz of status
  // visual_tools.deleteAllMarkers();
  // visual_tools.publishText(text_pose, "Object detached from robot", rvt::WHITE, rvt::XLARGE);
  // visual_tools.trigger();

  // /* Wait for MoveGroup to receive and process the attached collision object message */
  // visual_tools.prompt("Press 'next' in the RvizVisualToolsGui window once the new object is detached from the robot");

  // // Now, let's remove the objects from the world.
  // ROS_INFO_NAMED("tutorial", "Remove the objects from the world");
  // std::vector<std::string> object_ids;
  // object_ids.push_back(collision_object.id);
  // object_ids.push_back(object_to_attach.id);
  // planning_scene_interface.removeCollisionObjects(object_ids);

  // // Show text in RViz of status
  // visual_tools.publishText(text_pose, "Objects removed", rvt::WHITE, rvt::XLARGE);
  // visual_tools.trigger();

  // /* Wait for MoveGroup to receive and process the attached collision object message */
  // visual_tools.prompt("Press 'next' in the RvizVisualToolsGui window to once the collision object disappears");

  // // END_TUTORIAL

  // ros::shutdown();
  // return 0;
}